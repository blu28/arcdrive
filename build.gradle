import java.text.SimpleDateFormat
plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2020.1.2"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamNumber()
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    implementation wpi.deps.wpilib()
    nativeZip wpi.deps.wpilibJni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.wpilibJni(wpi.platforms.desktop)


    implementation wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

    testImplementation 'junit:junit:4.12'

    // Enable simulation gui support. Must check the box in vscode to enable support
    // upon debugging
    simulation wpi.deps.sim.gui(wpi.platforms.desktop, false)
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}

// Functions to write output to Splash Screen info
def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine "git", "log", "-n", "1", "--oneline", "--decorate", "HEAD"
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getGitBranch = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine "git", "rev-parse", "--abbrev-ref", "HEAD"
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getGitFilesChanged = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine "git", "diff", "--name-only", "HEAD"
        standardOutput = stdout
    }
    return stdout.toString().trim().replace("\n", ", ").replace("src/main/java/frc/robot/", "")
}

def getGitRemote = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine "git", "remote", "--verbose"
        standardOutput = stdout
    }
    return stdout.toString().trim().replace("\n", ", ").replace("src/main/java/frc/robot/", "")
}

task versionTxt()  {
    doLast {
        String resourcesDir = "$projectDir/src/main/resources"
        new File("$resourcesDir/branch.txt").text = getGitBranch()
        new File("$resourcesDir/commit.txt").text = getGitHash()
        new File("$resourcesDir/changes.txt").text = getGitFilesChanged()
        new File("$resourcesDir/remote.txt").text = getGitRemote()
        new File("$resourcesDir/buildtime.txt").text =
                new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())
    }
}

task deployHost() {
    doLast {
        String deploy_host = ""
        String deployDir = "$projectDir/src/main/deploy"
        try {
            deploy_host = java.net.InetAddress.getLocalHost().getHostName()
        } catch (all) {
            deploy_host = "unknown"
        }
        new File("$deployDir/deployhost.txt").text = deploy_host
        new File("$deployDir/deploytime.txt").text = 
            new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(new Date())
    }
}
task ensureResources() {
    doLast {
        String resourcesDir = "$projectDir/src/main/resources"
        mkdir "$resourcesDir"
    }
}

build.dependsOn versionTxt
tasks.getByName('versionTxt').dependsOn(ensureResources)
tasks.getByName('deploy').dependsOn(deployHost)
tasks.getByName('simulateExternalJava').dependsOn(deployHost)